diff --git a/node_modules/@preact/preset-vite/dist/esm/index.mjs b/node_modules/@preact/preset-vite/dist/esm/index.mjs
index 774ff4a..5e26943 100644
--- a/node_modules/@preact/preset-vite/dist/esm/index.mjs
+++ b/node_modules/@preact/preset-vite/dist/esm/index.mjs
@@ -1,9 +1,10 @@
 import prefresh from "@prefresh/vite";
 import { preactDevtoolsPlugin } from "./devtools.mjs";
 import { createFilter, parseId } from "./utils.mjs";
+import { PrerenderPlugin } from "./prerender.mjs";
 import { transformAsync } from "@babel/core";
 // Taken from https://github.com/vitejs/vite/blob/main/packages/plugin-react/src/index.ts
-function preactPlugin({ devtoolsInProd, devToolsEnabled, prefreshEnabled, reactAliasesEnabled, include, exclude, babel, jsxImportSource, } = {}) {
+function preactPlugin({ devtoolsInProd, devToolsEnabled, prefreshEnabled, reactAliasesEnabled, prerender, include, exclude, babel, jsxImportSource, } = {}) {
     var _a;
     const baseParserOptions = [
         "importMeta",
@@ -25,6 +26,7 @@ function preactPlugin({ devtoolsInProd, devToolsEnabled, prefreshEnabled, reactA
     devToolsEnabled = devToolsEnabled !== null && devToolsEnabled !== void 0 ? devToolsEnabled : true;
     prefreshEnabled = prefreshEnabled !== null && prefreshEnabled !== void 0 ? prefreshEnabled : true;
     reactAliasesEnabled = reactAliasesEnabled !== null && reactAliasesEnabled !== void 0 ? reactAliasesEnabled : true;
+    prerender = prerender !== null && prerender !== void 0 ? prerender : { enabled: false };
     const jsxPlugin = {
         name: "vite:preact-jsx",
         enforce: "pre",
@@ -133,6 +135,7 @@ function preactPlugin({ devtoolsInProd, devToolsEnabled, prefreshEnabled, reactA
         ...(prefreshEnabled
             ? [prefresh({ include, exclude, parserPlugins: baseParserOptions })]
             : []),
+        ...(prerender.enabled ? [PrerenderPlugin(prerender)] : []),
     ];
 }
 export default preactPlugin;
diff --git a/node_modules/@preact/preset-vite/dist/esm/prerender.mjs b/node_modules/@preact/preset-vite/dist/esm/prerender.mjs
new file mode 100644
index 0000000..0b75ce5
--- /dev/null
+++ b/node_modules/@preact/preset-vite/dist/esm/prerender.mjs
@@ -0,0 +1,240 @@
+import path from "node:path";
+import os from "node:os";
+import { promises as fs } from "node:fs";
+import MagicString from "magic-string";
+import { parse as htmlParse } from "node-html-parser";
+import rsModuleLexer from "rs-module-lexer";
+function enc(str) {
+    return str
+        .replace(/&/g, "&amp;")
+        .replace(/"/g, "&quot;")
+        .replace(/</g, "&lt;")
+        .replace(/>/g, "&gt;");
+}
+function serializeElement(element) {
+    if (element == null)
+        return "";
+    if (typeof element !== "object")
+        return String(element);
+    if (Array.isArray(element))
+        return element.map(serializeElement).join("");
+    const type = element.type;
+    let s = `<${type}`;
+    const props = element.props || {};
+    let children = element.children;
+    for (const prop of Object.keys(props)) {
+        const value = props[prop];
+        // Filter out empty values:
+        if (value == null)
+            continue;
+        if (prop === "children" || prop === "textContent")
+            children = value;
+        else
+            s += ` ${prop}="${enc(value)}"`;
+    }
+    s += ">";
+    if (!/link|meta|base/.test(type)) {
+        if (children)
+            s += serializeElement(children);
+        s += `</${type}>`;
+    }
+    return s;
+}
+export function PrerenderPlugin({ prerenderScript, additionalPrerenderRoutes, } = {}) {
+    const preloadHelperId = "vite/preload-helper";
+    let viteConfig = {};
+    additionalPrerenderRoutes || (additionalPrerenderRoutes = []);
+    /**
+     * From the non-external scripts in entry HTML document, find the one (if any)
+     * that provides a `prerender` export
+     */
+    const getPrerenderScriptFromHTML = async (input) => {
+        // prettier-ignore
+        const entryHtml = typeof input === "string"
+            ? input
+            : Array.isArray(input)
+                ? input.find(i => /html$/.test(i))
+                : Object.values(input).find(i => /html$/.test(i));
+        if (!entryHtml)
+            throw new Error("Unable to detect entry HTML");
+        const htmlDoc = htmlParse(await fs.readFile(entryHtml, "utf-8"));
+        const scripts = htmlDoc
+            .getElementsByTagName("script")
+            .map(s => s.getAttribute("src"))
+            .filter((src) => !!src && !/^https:/.test(src));
+        if (scripts.length === 0)
+            throw new Error("No local scripts found in entry HTML");
+        const { output } = await rsModuleLexer.parseAsync({
+            input: await Promise.all(scripts.map(async (script) => ({
+                filename: script,
+                code: await fs.readFile(path.join(viteConfig.root, script), "utf-8"),
+            }))),
+        });
+        let entryScript;
+        for (const module of output) {
+            const entry = module.exports.find(exp => exp.n === "prerender");
+            if (entry) {
+                entryScript = module.filename;
+                break;
+            }
+        }
+        if (!entryScript)
+            throw new Error("Unable to detect prerender entry script");
+        return path.join(viteConfig.root, entryScript);
+    };
+    return {
+        name: "headless-prerender",
+        apply: "build",
+        enforce: "post",
+        configResolved(config) {
+            viteConfig = config;
+        },
+        async options(opts) {
+            if (!opts.input)
+                return;
+            if (!prerenderScript) {
+                prerenderScript = await getPrerenderScriptFromHTML(opts.input);
+            }
+            // prettier-ignore
+            opts.input =
+                typeof opts.input === "string"
+                    ? [opts.input, prerenderScript]
+                    : Array.isArray(opts.input)
+                        ? [...opts.input, prerenderScript]
+                        : { ...opts.input, prerenderEntry: prerenderScript };
+            opts.preserveEntrySignatures = "allow-extension";
+        },
+        // Injects a window check into Vite's preload helper, instantly resolving
+        // the module rather than attempting to add a <link> to the document.
+        transform(code, id) {
+            // Vite keeps changing up the ID, best we can do for cross-version
+            // compat is an `includes`
+            if (id.includes(preloadHelperId)) {
+                const s = new MagicString(code);
+                s.replace(`deps.length === 0`, `deps.length === 0 || typeof window === 'undefined'`);
+                return {
+                    code: s.toString(),
+                    map: s.generateMap({ hires: true }),
+                };
+            }
+        },
+        async generateBundle(_opts, bundle) {
+            var _a, _b;
+            // @ts-ignore
+            globalThis.location = {};
+            // @ts-ignore
+            globalThis.self = globalThis;
+            // Local, fs-based fetch implementation for prerendering
+            const nodeFetch = globalThis.fetch;
+            // @ts-ignore
+            globalThis.fetch = async (url, opts) => {
+                if (/^\//.test(url)) {
+                    const text = () => fs.readFile(`${path.join(viteConfig.root, viteConfig.build.outDir)}/${url.replace(/^\//, "")}`, "utf-8");
+                    return { text, json: () => text().then(JSON.parse) };
+                }
+                return nodeFetch(url, opts);
+            };
+            // Grab the generated HTML file, which we'll use as a template:
+            const tpl = bundle["index.html"].source;
+            let htmlDoc = htmlParse(tpl);
+            // Create a tmp dir to allow importing & consuming the built modules,
+            // before Rollup writes them to the disk
+            const tmpDir = await fs.mkdtemp(path.join(os.tmpdir(), "headless-prerender-"));
+            await fs.writeFile(path.join(tmpDir, "package.json"), JSON.stringify({ type: "module" }));
+            let prerenderEntry;
+            const outputs = Object.keys(bundle);
+            for (const output of outputs) {
+                if (!/\.js$/.test(output))
+                    continue;
+                await fs.writeFile(path.join(tmpDir, path.basename(output)), bundle[output].code);
+                if ((_a = bundle[output].exports) === null || _a === void 0 ? void 0 : _a.includes("prerender")) {
+                    prerenderEntry = bundle[output];
+                }
+            }
+            let head = { lang: "", title: "", elements: new Set() };
+            if (!prerenderEntry) {
+                this.error("Cannot detect module with `prerender` export");
+            }
+            const m = await import(`file://${path.join(tmpDir, path.basename(prerenderEntry.fileName))}`);
+            const prerender = m.prerender;
+            if (typeof prerender !== "function") {
+                this.error("Detected `prerender` export, but it is not a function");
+            }
+            // We start by pre-rendering the home page.
+            // Links discovered during pre-rendering get pushed into the list of routes.
+            const seen = new Set(["/", ...additionalPrerenderRoutes]);
+            let routes = [...seen].map(link => ({ url: link }));
+            for (const route of routes) {
+                if (!route.url)
+                    continue;
+                const outDir = route.url.replace(/(^\/|\/$)/g, "");
+                const assetName = path.join(outDir, outDir.endsWith(".html") ? "" : "index.html");
+                // Update `location` to current URL so routers can use things like `location.pathname`
+                const u = new URL(route.url, "http://localhost");
+                for (let i in u) {
+                    try {
+                        // @ts-ignore
+                        globalThis.location[i] = String(u[i]);
+                    }
+                    catch { }
+                }
+                const result = await prerender({ ssr: true, url: route.url, route });
+                if (result == null)
+                    continue;
+                // Reset HTML doc & head data
+                htmlDoc = htmlParse(tpl);
+                head = { lang: "", title: "", elements: new Set() };
+                // Add any discovered links to the list of routes to pre-render:
+                if (result.links) {
+                    for (let url of result.links) {
+                        const parsed = new URL(url, "http://localhost");
+                        url = parsed.pathname;
+                        // ignore external links and ones we've already picked up
+                        if (seen.has(url) || parsed.origin !== "http://localhost")
+                            continue;
+                        seen.add(url);
+                        routes.push({ url, _discoveredBy: route });
+                    }
+                }
+                let body;
+                if (result && typeof result === "object") {
+                    if (result.html)
+                        body = result.html;
+                    if (result.head) {
+                        head = result.head;
+                    }
+                }
+                else {
+                    body = result;
+                }
+                const htmlHead = htmlDoc.querySelector("head");
+                if (htmlHead) {
+                    if (head.title) {
+                        const htmlTitle = htmlHead.querySelector("title");
+                        htmlTitle
+                            ? htmlTitle.set_content(enc(head.title))
+                            : htmlHead.insertAdjacentHTML("afterbegin", `<title>${enc(head.title)}</title>`);
+                    }
+                    if (head.lang) {
+                        htmlDoc.querySelector("html").setAttribute("lang", enc(head.lang));
+                    }
+                    if (head.elements) {
+                        // Inject HTML links at the end of <head> for any stylesheets injected during rendering of the page:
+                        htmlHead.insertAdjacentHTML("beforeend", Array.from(new Set(Array.from(head.elements).map(serializeElement))).join(""));
+                    }
+                }
+                // Inject pre-rendered HTML into the start of <body>:
+                (_b = htmlDoc.querySelector("body")) === null || _b === void 0 ? void 0 : _b.insertAdjacentHTML("afterbegin", body);
+                // Add generated HTML to compilation:
+                if (route.url === "/")
+                    bundle["index.html"].source = htmlDoc.toString();
+                else
+                    this.emitFile({
+                        type: "asset",
+                        fileName: assetName,
+                        source: htmlDoc.toString(),
+                    });
+            }
+        },
+    };
+}
diff --git a/node_modules/@preact/preset-vite/dist/types/index.d.ts b/node_modules/@preact/preset-vite/dist/types/index.d.ts
index f982911..7b612e3 100644
--- a/node_modules/@preact/preset-vite/dist/types/index.d.ts
+++ b/node_modules/@preact/preset-vite/dist/types/index.d.ts
@@ -24,6 +24,23 @@ export interface PreactPluginOptions {
      * @default true
      */
     reactAliasesEnabled?: boolean;
+    /**
+     * Prerender plugin options
+     */
+    prerender?: {
+        /**
+         * Whether to prerender your app on build
+         */
+        enabled: boolean;
+        /**
+         * Absolute path to script containing an exported `prerender()` function
+         */
+        prerenderScript?: string;
+        /**
+         * Additional routes that should be prerendered
+         */
+        additionalPrerenderRoutes?: string[];
+    };
     /**
      * RegExp or glob to match files to be transformed
      */
@@ -49,6 +66,6 @@ export interface PreactBabelOptions extends BabelOptions {
         plugins: Extract<ParserOptions["plugins"], any[]>;
     };
 }
-declare function preactPlugin({ devtoolsInProd, devToolsEnabled, prefreshEnabled, reactAliasesEnabled, include, exclude, babel, jsxImportSource, }?: PreactPluginOptions): Plugin[];
+declare function preactPlugin({ devtoolsInProd, devToolsEnabled, prefreshEnabled, reactAliasesEnabled, prerender, include, exclude, babel, jsxImportSource, }?: PreactPluginOptions): Plugin[];
 export default preactPlugin;
 export { preactPlugin as preact };
